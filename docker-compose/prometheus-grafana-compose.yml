version: '3.8'

networks:
  monitoring_network:
    driver: bridge

volumes:
  prometheus_data: {}
  grafana_data: {}
  alertmanager_data: {}

services:
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    restart: always
    volumes:
      - ./prometheus:/etc/prometheus # Mount local prometheus config directory
      - prometheus_data:/prometheus  # Persistent data for Prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle' # Allows reloading config via HTTP POST
    ports:
      - "127.0.0.1:9090:9090" # Expose Prometheus on localhost only
    networks:
      - monitoring_network
    depends_on:
      - alertmanager # Optional, but good practice if Alertmanager is critical

  alertmanager:
    image: prom/alertmanager:latest
    container_name: alertmanager
    restart: always
    volumes:
      - ./alertmanager:/etc/alertmanager # Mount local alertmanager config directory
      - alertmanager_data:/alertmanager # Persistent data for Alertmanager
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
    ports:
      - "127.0.0.1:9093:9093" # Expose Alertmanager on localhost only
    networks:
      - monitoring_network

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    restart: always
    volumes:
      - grafana_data:/var/lib/grafana # Persistent data for Grafana (dashboards, users, etc.)
      # Optional: Mount custom Grafana provisioning files for datasources/dashboards
      # - ./grafana/provisioning/datasources:/etc/grafana/provisioning/datasources
      # - ./grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards
    environment:
      - GF_SECURITY_ADMIN_USER=admin # Change this
      - GF_SECURITY_ADMIN_PASSWORD=changethisgrafanapassword # Change this
      # - GF_SERVER_ROOT_URL=http://grafana.yourdomain.com # If proxying Grafana
      # - GF_SMTP_ENABLED=true
      # - GF_SMTP_HOST=your_smtp_host:port
      # - GF_SMTP_USER=your_smtp_user
      # - GF_SMTP_PASSWORD=your_smtp_password
      # - GF_SMTP_FROM_ADDRESS=grafana@yourdomain.com
    ports:
      - "127.0.0.1:3000:3000" # Expose Grafana on localhost only
    networks:
      - monitoring_network
    depends_on:
      - prometheus

  # Optional: Node Exporter for monitoring the Docker host itself via this stack
  # node-exporter:
  #   image: prom/node-exporter:latest
  #   container_name: node_exporter
  #   restart: always
  #   volumes:
  #     - /proc:/host/proc:ro
  #     - /sys:/host/sys:ro
  #     - /:/rootfs:ro
  #   command:
  #     - '--path.procfs=/host/proc'
  #     - '--path.sysfs=/host/sys'
  #     - '--path.rootfs=/rootfs'
  #     - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc|rootfs/var/lib/docker/containers|rootfs/var/lib/docker/overlay2|rootfs/run/docker/netns|rootfs/var/lib/docker/aufs)($$|/)'
  #   ports:
  #     - "127.0.0.1:9100:9100" # Expose Node Exporter on localhost only
  #   networks:
  #     - monitoring_network

# Note: For external access to Prometheus, Alertmanager, Grafana,
# use a reverse proxy (e.g., Nginx, Traefik, Caddy) to handle SSL and routing.
# Do not expose these ports directly to the internet without proper security.